eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
spring.application.name = api-gateway
logging.level.root=INFO
##class responsible for definign the routs and identifying them for the incoming requests
logging.level.org.springframework.cloud.gateway.route.RouteDefinitionLocator = INFO
logging.level.org.springframework.cloud.gateway=TRACE

##what happens is that i check the path coming with all predicates till i find a match
##after i find a match i call the corresponding uri
##here we r putting the services names not the host and port
##lb means use load balancer


#product service route
spring.cloud.gateway.routes[0].id=product-service
spring.cloud.gateway.routes[0].uri=lb://product-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/product


#oder service route
spring.cloud.gateway.routes[1].id=order-service
spring.cloud.gateway.routes[1].uri=lb://order-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/order


##Here if any match happens gateway gonna try to call http://localhost:8761/ereka/web (this doesnt exist) so i have to add a filter
##what i want it to do is to call http://localhost:8761 with filter that is gonna chnage the path to /
##When you use lb:// in the URI for a route in Spring Cloud Gateway, it typically expects to route to a load-balanced service registered with your service registry (e.g., Eureka). The lb:// prefix indicates that Spring Cloud Gateway should use client-side load balancing to route requests to instances of the specified service.
##when you attempted to use lb:// with the Discovery Server route (/eureka/web), it didn't work because the Eureka server itself is not a load-balanced service with multiple instances. Eureka is typically a single instance, acting as the service registry for other services. Therefore, using lb:// with the Eureka server URI is not appropriate.
#Discovery Server  route
spring.cloud.gateway.routes[2].id=discovery-server
spring.cloud.gateway.routes[2].uri=http://localhost:8761
spring.cloud.gateway.routes[2].predicates[0]=Path=/eureka/web
spring.cloud.gateway.routes[2].filters[0]=SetPath=/


#Discovery Server static resources  route
spring.cloud.gateway.routes[3].id=discovery-server-static
spring.cloud.gateway.routes[3].uri=http://localhost:8761
spring.cloud.gateway.routes[3].predicates[0]=Path=/eureka/**

##for authentication and authorization
#spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8181/realms/spring-boot-microservices.realm

###
management.metrics.export.zipkin.enabled=true
management.tracing.sampling.probability=1.0
management.metrics.export.zipkin.uri=http://localhost:9411


#management.metrics.export.zipkin.enabledcontrols whether to enable Micrometer's Zipkin exporter. This exporter transmits data about metrics gathered by Micrometer to a Zipkin server for distributed tracing purposes.
#
#Here's a breakdown of what this property does:
#
#Enabled Value (true):
#
#When set to true, Micrometer actively monitors your application and collects various metrics about its performance and behavior.
#These metrics include execution times, error rates, and resource utilization for different operations and components within your application.
#Micrometer then automatically exports this data to your Zipkin server using its Zipkin exporter.
#This allows you to visualize and analyze these metrics within the Zipkin UI, gaining valuable insights into your application's performance and potential bottlenecks across its distributed components.
#
#
#The property management.tracing.sampling.probability=1.0 in your application.properties file controls the sampling rate for distributed tracing in your application using Micrometer. Here's what it does:


#####################explanation
#logging.level.root=INFO: This sets the logging level for the root logger to INFO. The root logger is the ancestor of all other loggers in the logging hierarchy. Setting it to INFO means that only messages with a severity level of INFO, WARN, ERROR, or FATAL will be logged.
#
#logging.level.org.springframework.cloud.gateway.route.RouteDefinitionLocator=INFO: This sets the logging level for the org.springframework.cloud.gateway.route.RouteDefinitionLocator class to INFO. This means that only messages with a severity level of INFO, WARN, ERROR, or FATAL from this class will be logged.
#
#logging.level.org.springframework.cloud.gateway=TRACE: This sets the logging level for all classes under the org.springframework.cloud.gateway package to TRACE. TRACE is the most verbose logging level, and it includes all log messages, including those at lower severity levels like DEBUG, INFO, WARN, ERROR, and FATAL.
#
#In summary, these configurations control the logging levels for different parts of the Spring Cloud Gateway application:
#
#Messages from the root logger and org.springframework.cloud.gateway.route.RouteDefinitionLocator class are logged at the INFO level or higher.
#Messages from all classes under the org.springframework.cloud.gateway package are logged at the TRACE level or higher, providing detailed logging for debugging and troubleshooting purposes.
#User
#what is logging in the first place that u r talking about
#ChatGPT
#Logging is the process of recording events, actions, or messages that occur during the execution of a software application